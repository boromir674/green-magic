[tox]
envlist = clean,check,py36-cov,py37-cov,py38-cov
skip_missing_interpreters = true
requires = tox-conda

[testenv]
basepython = {clean,check}: {env:TOXPYTHON:python3}
deps =
    -rrequirements/base.txt
    -rrequirements/dev.txt
setenv =
    PYTHONPATH={toxinidir}/tests
    PYTHOUNBUFFERED=yes
    PIP_DISABLE_PIP_VERSION_CHECK=1
    VIRTUALENV_NO_DOWNLOAD=0
    TEST_RESULTS_DIR={toxinidir}/test-results
    JUNIT_TEST_RESULTS=junit-test-results.xml
    BUILD_ARTIFACTS_DIR={toxinidir}/build-artifacts
    CURRENT_PACKAGE_VERSION=0.3.16
passenv =
    *
    # See https://github.com/codecov/codecov-python/blob/5b9d539a6a09bc84501b381b563956295478651a/README.md#using-tox
    codecov: TOXENV
    codecov: CI
    codecov: TRAVIS TRAVIS_*
commands = {posargs:pytest --cov --cov-report=term-missing -vv --junitxml={env:TEST_RESULTS_DIR:test-results}/{env:JUNIT_TEST_RESULTS:junit-test-results.xml}}


[base]
commands_pre = python -c 'import nltk; nltk.download("stopwords"); nltk.download("punkt"); nltk.download("wordnet")'

[nocov]
commands = {posargs:python -m pytest -vv}

###### MAIN ######
[testenv:py36-cov]
basepython = {env:TOXPYTHON:python3.6}
conda_deps = somoclu
conda_channels = conda-forge
commands_pre = {[base]commands_pre}

[testenv:py37-cov]
basepython = {env:TOXPYTHON:python3.7}
conda_deps = somoclu
conda_channels = conda-forge
use_develop = true
commands_pre = {[base]commands_pre}

[testenv:py38-cov]
basepython = {env:TOXPYTHON:python3.8}
conda_deps = somoclu
conda_channels = conda-forge
commands_pre = {[base]commands_pre}


[testenv:py36]
basepython = {env:TOXPYTHON:python3.6}
conda_deps = somoclu
conda_channels = conda-forge
commands_pre = {[base]commands_pre}
commands = {[nocov]commands}

[testenv:py37]
basepython = {env:TOXPYTHON:python3.7}
use_develop = true
conda_deps = somoclu
conda_channels = conda-forge
commands_pre = {[base]commands_pre}
commands = {[nocov]commands}

[testenv:py38]
conda_deps = somoclu
conda_channels = conda-forge
basepython = {env:TOXPYTHON:python3.8}
commands_pre = {[base]commands_pre}
commands = {[nocov]commands}


###### SUPPORT ######
[testenv:clean]
deps = coverage
skip_install = True
commands = coverage erase

[testenv:check]
description = Run the build step (creates a source distribution and a wheel) and test the produced artefacts with twine
    to make sure the packaging configuration (to prepare for pypi) is valid
deps =
    docutils
    readme-renderer
    pygments
    check-manifest
    twine
skip_install = True
commands =
    check-manifest
    python setup.py sdist bdist_wheel
    twine check dist/so-magic-*.tar.gz
    twine check dist/so_magic-*.whl

#### DOCS ####
[docs-base]
deps =
    -rrequirements/base.txt
    -rrequirements/docs.txt

[testenv:docs]
description = Check spelling on text, convert text into html, check external urls
basepython = python3.7
conda_channels = conda-forge
conda_deps = somoclu
deps = {[docs-base]deps}
use_develop = true
commands =
    sphinx-build {posargs:-E} -b doctest docs dist/docs
    sphinx-build {posargs:-E} -b html docs dist/docs
    sphinx-build -b linkcheck docs dist/docs

[testenv:spell]
# requires the pyenchant C library (ie on Linux: sudo apt-get install python-pyenchant)
description = Check spelling on the text of rst doc files
basepython = python3.7
setenv = SPELLCHECK=1
conda_channels = conda-forge
conda_deps = somoclu
deps =
    {[docs-base]deps}
    pyenchant
use_develop = true
commands = sphinx-build -b spelling docs dist/docs

[testenv:linkcheck]
description = check the links if they redirect to a webpage as expected
basepython = python3.8
deps = {[docs-base]deps}
use_develop = true
commands = sphinx-build -b linkcheck docs dist/docs
