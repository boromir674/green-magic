version: 2.1

executors:
  py37-docker-image:
    docker:
      - image: circleci/python:3.7.9
  java15-docker-image:
    docker:
      - image: cimg/openjdk:15.0.1
  ubuntu-1604-vm:
    machine:
      image: ubuntu-1604:201903-01

jobs:
  build_n_test:
    executor: py37-docker-image
    steps:
      - run: pwd
      - checkout
      - run: python --version
      - run:
          name: Equip machine with latest pip & wheel
          command: python -m pip install -U pip wheel
      - run:
          name: Equip machine with tox automation tool
          command: python -m pip install --user tox
      - run:
          name: Equip machine with anaconda (conda executable)
          command: |
            chmod +x scripts/install_anaconda.sh
            scripts/install_anaconda.sh
      - run:
          name: Run unittests & measure code coverage
          command: |
            export CONDA_EXE=/home/circleci/miniconda/bin/conda
            python -m tox -e clean,check,py37-cov
      - store_test_results:  # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: test-results
      - store_artifacts:
          path: test-results
      # currently the 'test-results' path (define above) must match the TEST_RESULTS_DIR env variable found in circleci web site
      - store_artifacts:
          path: .coverage
      - run:
          name: Transform test results data into xml
          command: python -m tox -c tox-dev.ini -e report -- coverage xml
      - run:
          name: Transform test results-data into html-formatted reports
          command: python -m tox -c tox-dev.ini -e report -- coverage html
      - store_artifacts:
          path: coverage.xml
      - store_artifacts:
          path: htmlcov
          destination: htmlcov
      # Persist the specified paths (eg .coverage and tox.ini) into the workspace for use in proceeding job.
      - persist_to_workspace:
          # Must be an absolute path, or relative path from working_directory. This is a directory on the container which is
          # taken to be the root directory of the workspace.
          root: .
          # Must be relative path from root
          paths:
            - coverage.xml
            - .coverage
            - tox.ini
  
  send-coverage-to-codacy:
    executor: java15-docker-image
    steps:
      - attach_workspace:
          at: .
      - run: curl --version
      - run: java --version
      - run:
          name: Send test data to codacy.com server
          command: |
            sudo apt-get install jq
            curl -LSs "$(curl -LSs https://api.github.com/repos/codacy/codacy-coverage-reporter/releases/latest | jq -r '.assets | map({name, browser_download_url} | select(.name | endswith(".jar"))) | .[0].browser_download_url')" -o codacy-coverage-reporter-assembly.jar
            java -jar codacy-coverage-reporter-assembly.jar report -l Python -r coverage.xml
  build-documentation:
    executor: py37-docker-image
    steps:
      - checkout
      - run:
          name: Equip machine with tox automation tool
          command: python -m pip install --user tox
      - run:
          name: Install dependencies of documentation building tools
          command: sudo apt-get install python-enchant
      - run:
          name: Install & run documentation building tools
          command: python -m tox -c tox-dev.ini -e spell,docs

  deploy-to-staging:
    executor: py37-docker-image
    environment:
      CONDA_EXE: /home/circleci/miniconda/bin/conda
    steps:
      - checkout
      - run:
          name: Install the 'tox' automation tool
          command: python -m pip install --user tox
      - run:
          name: Deploy package (source distro & wheel) to 'testpypi' (index) server
          command: python -m tox -c tox-dev.ini -e deploy-final -vv

  integration-test:
    executor: py37-docker-image
    steps:
      - checkout
      - run:
          name: Run the automated integration test script
          command: |
            chmod +x scripts/integration-test.sh
            scripts/integration-test.sh $(python scripts/parse_package_version.py)

#  build_container:
#    working_directory: ~/build
#    executor: ubuntu-1604-vm
#    steps:
#      - checkout
#      - run:
#          name: Build container
#          command: docker-compose up --build -d

  visualize_dependency_graphs:
    executor: py37-docker-image
    steps:
      - checkout
      - run: sudo apt-get update -y
      - run: python -m pip install -U pip
      - run: sudo apt-get install graphviz
      - run:
          name: Install tox automation tool
          command: python -m pip install --user tox
      - run: mkdir build-artifacts
      - run: python -m tox -c tox-dev.ini -e graphs
      - store_artifacts:
          path: build-artifacts
          destination: dep-graphs

workflows:
  version: 2
  build_accept:
    jobs:
      - build_n_test:
          filters:
            tags:
              only: /.*/  # runs for all branches and all tags
      - send-coverage-to-codacy:
          requires:
            - build_n_test
          filters:
            tags:
              only: /.*/
      - build-documentation:
          requires:
            - build_n_test
          filters:
            tags:
              only: /.*/
      - visualize_dependency_graphs:
          requires:
            - build_n_test
          filters:
            branches:
              only:
                - master
      - deploy-to-staging:
          requires:
            - build_n_test
          filters:
            branches:
              only: release-staging
      - integration-test:
          requires:
            - deploy-to-staging
          filters:
            branches:
              only: release-staging
