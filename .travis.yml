os: linux
language: python
cache: pip

env:
  global:
    - LD_PRELOAD=/lib/x86_64-linux-gnu/libSegFault.so
    - SEGFAULT_SIGNALS=all
    - TOX_SKIP_MISSING_INTERPRETERS="False"
    - secure: p4\/GxB\+E5BvcMDH0e0zztxDA\/vHBFnyAfjvjMXo6hEqVZ4nsSMHulfk3D05d545aL8bVW8puv9h9eb\/ULyart8tOK\/cP5HrfTMV0zS5CYaSdRjfUNArnHqu\/PuS7\+dwC2jm0pJ6kYCEg6QZkT4NMxhOT984CVWKkYSnJeOePqPQGn3o\/mWESwjpCTit1uyLIcMdyjfTVNWm0aYj5YlBbjwzLwyQebJQpovvU8rRpSAycHFufnDNWEoeuNpazTM017pLZ8Iy9mfB2p8IqONFJFgNdTxBq9DQDAQFcVFtNv7vsICVRswfpDNvGvWzHir7n4xolEfscH8pW3\/4lAGmWeFZR\+LGBnxVxNDJb52kbhri1Fe2b\/5NXM\+NSN5uR0bk9lD7sLJIdI4AV7nv4MTGtbZVuQw\+oIiYMuaO7H9Ayq83VaOAVULynNKlhUWR7t52BqLZxU2MgK9Y4rLzr9ljkBK5lAGjUlZRnHXJU\+N\+fNAVS39i71KbI5pH6t1v05bz6A0Cl4VckystiH1eLYQN5bnJh4eNeQN3\/cJRjPXDE3B55iIEjGmKLinpDVmXQdrf9UK239AYdLztUKty9k7wwTTEoMjxHWCv0AiVBvF\+LhrtScgAAv9MpT4s1zNuFmuZU1VOVJ32XTf\+4NGm1YJKzU5zf5wikDFtUAuAm8aIPwvI=
#    - secure: LGokqa\+77mHCU3xddGTZBMiyf7YecqIHM4peFsH5LJQh2crh9WO3SeyzW9R8EBnuE\/pdgs41noKvR\+bIrjP3If6KJVppNSSg7\/rjqVn3GDw0A\+NA5yxV5\/PN7OpceghhjZJP7lacuI0C02wnVqlq0MR4fYY1DVja8lYIylKpNG19uso\+4LzSPS0fNepLtCwix3X91MXUCIzSguF70bEsN0Q\+fSUHGt\+EHSkeAZ5551gRyujDdewMK3XqKmZYV3tvmk6yNOgojk90wZTX8XWqO1Vnm1RBm8BVPPb2H9rwjQFdB0TggfdgeL\+lRSeMERIoFfkDO5roQwkDB0vMm3FeRY5g9GeFUwa\/Zz70riD3E4TzO\+aRLVv5sLjQgiTDZYpzFcc0uzW\+8SwxPoJMrl6kfDlzw\+lfwH4DMraOqK27S7pg9\/gGtWoDUAaDlFPVcm\+IkXNfhNkM9voJmIP\+GPfEk4q4zs\+aG4yIUQrjFXAleJ\/LVSOcJon\/iX4djxwC8Dz0Sr0QtjwLPfwh0CsLxl927pfT3\/VXocoSkm7S1UPFimWLqd9gr7vPuGOIzpXMGQ5V3e\/o1AyCULRqo7MVCs7mPBBFB2lu6irCW9L9NS\/\/Z7le4R6ph2MT0rr1dyNVTJve8Jjty\+cgsYVGPkF8bUuMkb6PBRVRzhZpsROuMyq6beU=
#    - secure: ZwDmZfuB4mX1aoBG5\/bhfPZw5G9M5EoLFyQjpxIVeU54kqM3EZPaWcK4BIDxn4euJJf8BsgSKYSOLJHOXcX7DmkRJxkJiZ1GVlp0ygYukloqYjlef1DGcehA9B4H\/mKgwrOx14BiajJZnSiXor0dROT92g90GoMLWVbOMRA5\+8zZEBQXxl29RT4npptVPykRvmE05fFkAMUC\/2h6nme85L2t9J\+M4i4uPCzcabBzVxOdTog9\/UyLf8ejJ5lpbv0oAz7Dnsaxvx2Jx\+eQ5s49lrf1vu11cpn8GkeOOhPbWmxJg7UIZToEeRADLPasitY9K1TXI1DWhnPhexuQo6sr766lNLBbbZgf9z9NE1fCAYnAjwIO0FbWYUC91vPDO7PdkPBch4S6CCYqPsbTioGFziN\/VVMnjiEuM1VN8Px1qHFfWlCTL8llph\/PHim4zL9qX2z5nGBNYDOF3SHJmlU0IQZLVj0HilkS6S7Bhk3N6OlScR6MAbnBpwrqU\+Ii4xe\/bkeUuQj\/jC0TSufRdUtYodDkNbGbeF38vLjNLVMpkaM\/DqEsrl0ank\/qxtnxxHr2CE4mV597\+aJkrf5bqLtuJwprnPl09vo\+gTJ3hIQWKiZE13Ummv9OslRC4\+bYPgFud7SC9YsegpJ3GI0eIozuR4A\+Ht8GX3vn8Aze0e2bCok=

before_install:
  - python --version
  - pip --version
  - uname -a
  - lsb_release -a
  - sudo python -m pip install -U pip
  - python -m pip install tox
  - chmod +x scripts/install_anaconda.sh
  - scripts/install_anaconda.sh
  - export CONDA_EXE=/home/travis/miniconda/bin/conda
  - echo $CONDA_EXE

script:
  - tox -vv

after_success:
  - tox -e report,codecov
  - sudo apt-get install jq
  - curl -LSs "$(curl -LSs https://api.github.com/repos/codacy/codacy-coverage-reporter/releases/latest | jq -r '.assets | map({name, browser_download_url} | select(.name | endswith(".jar"))) | .[0].browser_download_url')" -o codacy-coverage-reporter-assembly.jar
  - java -jar codacy-coverage-reporter-assembly.jar report -l Python -r coverage.xml


jobs:
  include:
#  - stage: Build_n_test
#    python: '3.6'
#    env: TOXENV=clean,py36-cov
#  - stage: Build_n_test
#    python: '3.7'
#    env: TOXENV=clean,py37-cov
#  - stage: Build_n_test
#    python: '3.8'
#    env: TOXENV=clean,py38-cov
#  - stage: Check_distro
#    env: TOXENV=check
#    name: "Check source distribution"
#  - stage Integration-Test
#    name: "Upload package to test-pypi"
#    python: '3.8'
#    script:
#      - export PYPI_USERNAME=$TEST_PYPI_USERNAME
#      - export PYPI_PASSWORD=$TEST_PYPI_PASSWORD
#      - tox -e deploy-pypi
#      - chmod +x scripts/integration-test.sh
#      - scripts/integration-test.sh
#    after_success: skip
  - stage: Staging-Integration-test
    name: "Do an emulated real-world-scenario test using the staging server: install lib from test-pypi and run tests"
    python: '3.8'
    script:
      - tox -e deploy-pypi -vv
#      - chmod +x scripts/integration-test.sh
#      - scripts/integration-test.sh
    after_success: skip
##  - stage: Build docs
##    install:
##      - sudo apt-get install python-enchant
##    env: TOXENV=spell,docs
##    name: "Build documentation"
#  - stage: deploy to staging (pypi test server)
#    deploy:
#    - provider: script
#      script: tox -e deploy-pypi -vv
#      on:
#        branch: staging
#    before_install: skip
#    install: skip
#    script: skip
#    after_success: skip


after_failure:
  - more .tox/log/* | cat
  - more .tox/*/log/* | cat


# In this stage ALL jobs have succeeded!
# - echo "Potentially any of (Unittests, integrations tests, functional tests, regression tests, stress tests)."
# - echo "You can use this 'point' to \"send stuff in production\""
#deploy:
#  - provider: script
#    skip_cleanup: true
#    script: assh -p22 $STAGING_SERVER_USER@$STAGING_SERVER "mkdir -p $STAGING_PATH_STABLE" && ssh -p22 $STAGING_SERVER_USER@$STAGING_SERVER "mkdir -p $STAGING_PATH_TRUNK" && rsync -rav -e ssh --exclude='.git/' --exclude=scripts/ --exclude='.travis.yml' --delete-excluded ./ $STAGING_SERVER_USER@$STAGING_SERVER:$STAGING_PATH_TRUNK && rsync -rav -e ssh --exclude='.git/' --exclude=scripts/ --exclude='.travis.yml' --delete-excluded ./ $STAGING_SERVER_USER@$STAGING_SERVER:$STAGING_PATH_STABLE
#    on:
#      branch: staging
#  - provider: script
#    skip_cleanup: true
#    script: ssh -p22 $PRODUCTION_SERVER_USER@$PRODUCTION_SERVER "mkdir -p $PRODUCTION_SERVER_THEMES_PATH/_tmp-bornholm"&& ssh -p22 $PRODUCTION_SERVER_USER@$PRODUCTION_SERVER "mkdir -p $PRODUCTION_SERVER_THEMES_PATH/bornholm" && rsync -rav -e ssh --exclude='.git/' --exclude=scripts/ --exclude='.travis.yml' --delete-excluded ./ $PRODUCTION_SERVER_USER@$PRODUCTION_SERVER:$PRODUCTION_SERVER_THEMES_PATH/_tmp-bornholm && ssh -p22 $PRODUCTION_SERVER_USER@$PRODUCTION_SERVER "mv $PRODUCTION_SERVER_THEMES_PATH/bornholm $PRODUCTION_SERVER_THEMES_PATH/_old-bornholm && mv $PRODUCTION_SERVER_THEMES_PATH/_tmp-bornholm $PRODUCTION_SERVER_THEMES_PATH/bornholm" && ssh -p22 $PRODUCTION_SERVER_USER@$PRODUCTION_SERVER "rm -rf $PRODUCTION_SERVER_THEMES_PATH/_old-bornholm"
#    on:
#      branch: master
#deploy:
#  provider: script
#  script: .travis/deploy.sh
#  on:
#    all_branches: true


#notifications:
#  email:
#    on_success: never
#    on_failure: never


#- stage: release
#    if: tag IS present
#    deploy:
#      provider: pypi
#      user: praekelt.org
#      password:
#      secure: <encrypted password>
#      distributions: sdist bdist_wheel
#      on:
#        tags: true
#
#    install: skip
#    script: skip
#    after_success: skip
